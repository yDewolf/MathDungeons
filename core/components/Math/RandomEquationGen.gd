extends Node
class_name RandomEquationGen

@export_category("Equation Parameters")
@export var max_operation_amount: int = 2
@export var min_operation_amount: int = 1
@export var allowed_operations: Array[MathOperation.OperationTypes] = [
	MathOperation.OperationTypes.POWER,
	MathOperation.OperationTypes.MULTIPLY,
	MathOperation.OperationTypes.DIVIDE,
	MathOperation.OperationTypes.ADD,
	MathOperation.OperationTypes.SUBTRACT,
]

@export_category("Random number generator")
@export var decimal_range: float = 1
@export var integer_range: int = 10
## If the max digit is 2 (10), the max number will be 100 instead of 99
@export var inclusive: bool = true
@export var allow_negative: bool = true

func _ready() -> void:
	#return
	var start_time: int = Time.get_ticks_usec()

	var expression_string: String = generate_expression_string()
	var expression: MathExpression = MathExpression.create_from_string(expression_string)
	print(expression_string)
	print("= ", expression.solve().get_value())
	
	print_rich("[color=orange]DEBUG: [color=white]TOOK [color=cyan]", Time.get_ticks_usec() - start_time, "us[color=white] to solve a equation")



func random_number() -> float:
	return _random_number(integer_range, decimal_range, inclusive, allow_negative)

static func _random_number(max_digits: int, decimal_digit_range: float, inclusive_range: bool, enable_negative: float) -> float:
	var offset: int = 0
	if not inclusive_range:
		offset = -1
	
	var max_number: int = 10 * (max_digits / decimal_digit_range) + offset
	var min_number = 0
	if enable_negative:
		min_number = -max_number
	var number = randi_range(min_number, max_number)
	return float(number) * decimal_digit_range

func generate_expression_string() -> String:
	return _generate_expression_string(
		min_operation_amount,
		max_operation_amount,
		allowed_operations,
		integer_range,
		decimal_range,
		inclusive,
		allow_negative
	)

## Really bad way to generate expressions
## Expressions should be generated from the ground up
## And not generated by using strings
static func _generate_expression_string(min_op: int, max_op: int, allowed_ops: Array[MathOperation.OperationTypes], max_digits: int, decimal_digit_range: float, inclusive_range: bool, enable_negative: bool) -> String:
	var expression_string: String = ""
	var op_amount: int = randi_range(min_op, max_op)
	
	var operation_list: Array[MathOperation.OperationTypes] = allowed_ops.duplicate()
	var last_operation: int = -1
	for idx in op_amount:
		if last_operation != -1:
			operation_list.append(last_operation)
		
		var operation_id = operation_list.pick_random()
		last_operation = operation_id
		operation_list.erase(operation_id)
		
		var operation_char = MathOperation.OPERATION_STRINGS.get(operation_id)
		
		if idx == 0:
			var first_n = _random_number(max_digits, decimal_digit_range, inclusive_range, enable_negative)
			expression_string += str(first_n) + " "
		
		var second_n = _random_number(max_digits, decimal_digit_range, inclusive_range, enable_negative)
		expression_string += operation_char + " " + str(second_n)
		if idx != op_amount - 1:
			expression_string += " "
	
	return expression_string
